name: Paper Trading Trial
on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      date:
        description: 'Date for simulation (YYYYMMDD)'
        required: false
        default: ''
      bankroll:
        description: 'Starting bankroll amount'
        required: false
        default: '1000'
jobs:
  paper-trading-simulation:
    runs-on: ubuntu-latest
    outputs:
      roi: ${{ steps.extract-roi.outputs.roi }}
      summary: ${{ steps.extract-roi.outputs.summary }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Determine simulation date
      id: date
      run: |
        if [ -n "${{ github.event.inputs.date }}" ]; then
          echo "date=${{ github.event.inputs.date }}" >> $GITHUB_OUTPUT
        else
          echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
        fi
    - name: Prepare test data
      run: |
        mkdir -p data
        echo "bet_id,timestamp,stake,odds,outcome,payout,strategy,bankroll" > data/bets.csv
        echo "1,2025-06-24T10:00:00,50.00,2.10,WIN,105.00,conservative,1055.00" >> data/bets.csv
        echo "2,2025-06-24T11:00:00,75.00,1.85,LOSS,-75.00,moderate,980.00" >> data/bets.csv
        echo "3,2025-06-24T12:00:00,100.00,2.25,WIN,225.00,aggressive,1205.00" >> data/bets.csv
    - name: Run paper trading simulation
      env:
        BANKROLL: ${{ github.event.inputs.bankroll || '1000' }}
        PAPER_TRIAL_MODE: 'true'
        RESULTS_SOURCE: 'data/bets.csv'
      run: |
        python scripts/paper_trader.py --date ${{ steps.date.outputs.date }}
    - name: Extract ROI for alerts
      id: extract-roi
      run: |
        if [ -f output/daily_summary.json ]; then
          ROI=$(cat output/daily_summary.json | python -c "import sys, json; print(json.load(sys.stdin)['roi_percent'])")
          echo "roi=$ROI" >> $GITHUB_OUTPUT
          echo "summary=$(cat output/daily_summary.json | jq -c .)" >> $GITHUB_OUTPUT
          echo "ROI: $ROI%"
        else
          echo "roi=0" >> $GITHUB_OUTPUT
          echo "summary={}" >> $GITHUB_OUTPUT
        fi
    - name: Display simulation results
      if: always()
      run: |
        echo "=== Paper Trading Results ==="
        if [ -f output/paper_metrics.csv ]; then
          tail -n 5 output/paper_metrics.csv
        else
          echo "No metrics file found"
        fi
        echo ""
        echo "=== Daily Summary ==="
        if [ -f output/daily_summary.json ]; then
          cat output/daily_summary.json
        else
          echo "No summary file found"
        fi
    - name: Upload simulation artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: paper-trading-results-${{ steps.date.outputs.date }}
        path: |
          output/simulation_*.csv
          output/daily_summary.json
        retention-days: 30
    - name: Create performance report
      if: always()
      run: |
        echo "## Paper Trading Report - ${{ steps.date.outputs.date }}" > report.md
        echo "" >> report.md
        if [ -f output/daily_summary.json ]; then
          echo "### Summary" >> report.md
          echo '```json' >> report.md
          cat output/daily_summary.json >> report.md
          echo '```' >> report.md
        fi
  
  check-alerts:
    needs: paper-trading-simulation
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Check ROI thresholds
      env:
        ROI: ${{ needs.paper-trading-simulation.outputs.roi }}
      run: |
        echo "ROI: $ROI%"
        if (( $(echo "$ROI > 20" | bc -l) )); then
          echo "🚨 HIGH ROI ALERT: $ROI%"
          echo "alert_type=high" >> $GITHUB_ENV
        elif (( $(echo "$ROI < -20" | bc -l) )); then
          echo "🚨 LOW ROI ALERT: $ROI%"
          echo "alert_type=low" >> $GITHUB_ENV
        else
          echo "✅ ROI within normal range: $ROI%"
          echo "alert_type=none" >> $GITHUB_ENV
        fi
    
    - name: Send alert notification
      if: env.alert_type != 'none'
      run: |
        if [ "${{ env.alert_type }}" == "high" ]; then
          echo "📈 ALERT: Paper trading achieved exceptional ROI of ${{ needs.paper-trading-simulation.outputs.roi }}%!"
        elif [ "${{ env.alert_type }}" == "low" ]; then
          echo "📉 ALERT: Paper trading showing significant loss with ROI of ${{ needs.paper-trading-simulation.outputs.roi }}%!"
        fi
        # Add Discord/Slack/Twilio webhook here if configured
