name: Dry Run

on:
  push:
    branches: [ main, develop, feat/ops-stabilization ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 7:30 AM ET (11:30 UTC during EDT, 12:30 UTC during EST)
    - cron: '30 11 * * *'
  workflow_dispatch:
    inputs:
      start_date:
        description: 'Start date for dry run (YYYY-MM-DD)'
        required: false
        default: ''
      end_date:
        description: 'End date for dry run (YYYY-MM-DD)'
        required: false
        default: ''
      bypass_guard_rail:
        description: 'Bypass guard rail checks'
        required: false
        default: 'false'

jobs:
  dry-run:
    runs-on: ubuntu-latest
    
    env:
      # Set timezone to UTC for consistency
      TZ: UTC

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run database migration
      run: |
        echo "üóÑÔ∏è Running database migration..."
        python scripts/migrate_schema.py
        
    - name: Set date range
      id: dates
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          # Use provided dates or defaults for manual runs
          START_DATE="${{ github.event.inputs.start_date }}"
          END_DATE="${{ github.event.inputs.end_date }}"
          
          # If dates not provided, use defaults
          if [ -z "$START_DATE" ]; then
            START_DATE="2025-06-26"
          fi
          if [ -z "$END_DATE" ]; then
            END_DATE="2025-07-05"
          fi
        else
          # For scheduled runs, use today
          START_DATE=$(date +%Y-%m-%d)
          END_DATE=$(date +%Y-%m-%d)
        fi
        
        echo "START_DATE=$START_DATE" >> $GITHUB_OUTPUT
        echo "END_DATE=$END_DATE" >> $GITHUB_OUTPUT
        echo "üìÖ Date range: $START_DATE to $END_DATE"

    - name: Run dry-run paper trading
      env:
        GOOGLE_SA_JSON: ${{ secrets.GOOGLE_SA_JSON }}
        GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
        RESULTS_API_KEY: ${{ secrets.RESULTS_API_KEY }}
        RESULTS_API_URL: ${{ secrets.RESULTS_API_URL }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        TWILIO_SID: ${{ secrets.TWILIO_SID }}
        TWILIO_AUTH: ${{ secrets.TWILIO_AUTH }}
        TWILIO_FROM: ${{ secrets.TWILIO_FROM }}
        PHONE_TO: ${{ secrets.PHONE_TO }}
      run: |
        echo "üöÄ Starting dry-run paper trading..."
        
        # Determine guard rail flag
        GUARD_RAIL_FLAG=""
        if [ "${{ github.event.inputs.bypass_guard_rail }}" == "true" ]; then
          GUARD_RAIL_FLAG="--bypass-guard-rail"
        fi
        
        # Run the enhanced auto paper script
        python auto_paper.py \ --bypass-guard-rail
          --start-date "${{ steps.dates.outputs.START_DATE }}" \
          --end-date "${{ steps.dates.outputs.END_DATE }}" \
          --dry-run \
          --min-slips 5 \
          $GUARD_RAIL_FLAG

    - name: Generate summary report
      if: always()
      run: |
        echo "üìä Generating summary report..."
        python -c "
        import json
        import os
        from datetime import datetime
        
        # Read state file if exists
        state_file = 'data/run_states/dry_run_${{ steps.dates.outputs.START_DATE }}_to_${{ steps.dates.outputs.END_DATE }}.json'
        if os.path.exists(state_file):
            with open(state_file, 'r') as f:
                state = json.load(f)
            
            print('## Dry Run Summary')
            print(f'**Date Range**: {state.get(\"start_date\")} to {state.get(\"end_date\")}')
            print(f'**Completed Days**: {len(state.get(\"completed_dates\", []))}')
            print(f'**Total Slips Generated**: {state.get(\"total_slips_generated\", 0)}')
            
            if state.get('errors'):
                print(f'**Errors**: {len(state.get(\"errors\", []))}')
                for error in state.get('errors', []):
                    print(f'  - {error.get(\"date\")}: {error.get(\"error\")}')
        else:
            print('No state file found - run may have failed early')
        "

    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dry-run-artifacts-${{ steps.dates.outputs.START_DATE }}
        path: |
          output/paper_slips_*.csv
          logs/daily_metrics_*.json
          data/run_states/dry_run_*.json
        retention-days: 30

    - name: Upload logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: error-logs-${{ github.run_id }}
        path: |
          logs/*.log
        retention-days: 7

    - name: Notify completion
      if: always()
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        STATUS="‚úÖ Success"
        COLOR="3066993"
        if [ "${{ job.status }}" != "success" ]; then
          STATUS="‚ùå Failed"
          COLOR="15158332"
        fi
        
        # Send Discord notification
        if [ ! -z "$DISCORD_WEBHOOK_URL" ]; then
          curl -X POST $DISCORD_WEBHOOK_URL \
            -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"Dry Run Workflow $STATUS\",
                \"color\": $COLOR,
                \"fields\": [
                  {\"name\": \"Date Range\", \"value\": \"${{ steps.dates.outputs.START_DATE }} to ${{ steps.dates.outputs.END_DATE }}\", \"inline\": true},
                  {\"name\": \"Run ID\", \"value\": \"${{ github.run_id }}\", \"inline\": true},
                  {\"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"inline\": true}
                ],
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }"
        fi

